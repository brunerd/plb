#!/bin/zsh
#!/bin/bash
#!/bin/sh
#if you embed plb in your own script it works in these shells
#plx is an even smaller variant for extraction only (no crawling output)

: <<-LICENSE_BLOCK
plb - "plist broker" (minified) - Copyright (c) 2024 Joel Bruner (https://github.com/brunerd/plb)
Licensed under the MIT License: Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
LICENSE_BLOCK

function plb()({ set +x; } &> /dev/null;[ -n "${ZSH_NAME}" ] && set -y;helpText=$'plb 1.0 - plist broker (https://github.com/brunerd/plb)';function getPlistPropertyType(){ [ -t '0' ] && return 1; cat | /usr/bin/xmllint --xpath "local-name(/plist/*)" 2>/dev/null -; };function plistQuery(){ [ -t '0' ] && return 1;local queryArg=$(sed $'s/\'/\\\\\'/g' <<< "${1}");local plistData; read -r -d '' plistData <<< "$(cat)";if ! xmllint - 2>/dev/null 1>&2 <<< "${plistData}"; then return 1;fi;if [ -z "${queryArg}" ] || [ "${queryArg}" = ':' ]; then /usr/bin/xmllint --format - 2>/dev/null <<< "${plistData}";return 0;fi;local queryArgRS=$(sed $'s/\\\\:/\x1e/g' <<< "${queryArg}");local parentPath=$(sed $'s/\x1e/\\\\:/g' <<< "${queryArgRS%:*}"); [ "${queryArg}" = "${parentPath}" ] && unset parentPath;local finalElement="${queryArgRS##*:}";if [ -n "${finalElement}" ] && ! grep -q -E '^\d+$' <<< "${finalElement}"; then local parentXMLData; read -r -d '' parentXMLData <<< "$(/usr/libexec/PlistBuddy -x -c "print '${parentPath}'" /dev/stdin 2>/dev/null <<< "${plistData}")";local parentPathDataType=$(getPlistPropertyType <<< "${parentXMLData}");if [ "${parentPathDataType}" = "array" ]; then echo "error: cannot resolve non-numeric key name for array: ${parentPath}" >&2;return 1;fi;if [ "${finalElement}" = 'CF$UID' ] && [ "$(grep -c '<key>' <<< "${parentXMLData}")" = "1" ]; then grep -q '<integer>' 2>/dev/null <<< "${parentXMLData}" && local CFUIDFIX=1;fi;fi;if ((CFUIDFIX)); then /usr/libexec/PlistBuddy -x -c "print '${queryArg}'" /dev/stdin 2>/dev/null <<< "$(sed 's/integer>/string>/g' <<< "${plistData}")" | sed 's/string>/integer>/g' | /usr/bin/xmllint --format - 2>/dev/null;else /usr/libexec/PlistBuddy -x -c "print '${queryArg}'" /dev/stdin 2>/dev/null <<< "${plistData}" | /usr/bin/xmllint --format - 2>/dev/null;fi; };function listKeysOrLength(){ [ -t '0' ] && return 1;local plistData; read -r -d '' plistData <<< "$(cat)";local dataType=$(/usr/bin/xmllint --xpath "local-name(/plist/*)" 2>/dev/null - <<< "${plistData}");case "${dataType}" in "dict")/usr/bin/xmllint --xpath "/plist/dict/key/text()" - 2>/dev/null <<< "${plistData}" | /usr/bin/perl -MHTML::Entities -pe 'decode_entities($_)' | sed 's/:/\\:/g';;"array")/usr/bin/xmllint --xpath "count(/plist/array/*)" - 2>/dev/null <<< "${plistData}";;*)echo "error: list/length requires dict or array" >&2;return 1;;esac;return 0; };function plist2json(){ [ -t '0' ] && return 1;function jse()({ set +x; } &> /dev/null;JSCode=$'var argument=decodeURIComponent(escape(arguments[0]));var optionsArg = arguments[1] || \'{}\';var option = {};for (var i=0; i < optionsArg.length; i++) {switch (optionsArg.charAt(i)) { default: option[optionsArg.charAt(i)]=true; break; }};if (option.f) {try { var text = readFile(argument) } catch(error) { throw new Error(error); quit();};if (argument === "/dev/stdin") { text = text.slice(0,-1) }}else {var text=argument};print(JSON.stringify(text,null,0).replace((option.u ? /[\\u0000-\\u001f\\u007f-\\uffff]/g : /\\u007f/g), function(chr) { return "\\\\u" + ("0000" + chr.charCodeAt(0).toString(16)).slice(-4)}))';jsc=$(find "/System/Library/Frameworks/JavaScriptCore.framework/Versions/Current/" -name 'jsc');[ -z "${jsc}" ] && jsc=$(which jsc);[ -n "$BASH_VERSION" ] && unset OPTIND OPTARG;while getopts ":fhu" optionArg; do case "${optionArg}" in 'h')echo -e "${helpText}" >&2;return 0;;*)optionArgs+="${optionArg}";;esac;done;[ $OPTIND -ge 2 ] && shift $((OPTIND-1));if ! [ -t '0' ]; then optionArgs+="f";"${jsc}" -e "${JSCode}" -- "/dev/stdin" "${optionArgs}" <<< "$(cat)";else argument="${1}";if [ -z "${argument}" ]; then echo -e "${helpText}">&2;exit 0;elif grep -q "f" <<< "${optionArgs}" && ! [ -f "${argument}" ]; then echo "File not found: \"${argument}\"" >&2;exit 1;fi;"${jsc}" -e "${JSCode}" -- "${argument}" "${optionArgs}";fi);local plistData; read -r -d '' plistData <<< "$(cat)";local dataType=$(/usr/bin/xmllint --xpath "local-name(/plist/*)" 2>/dev/null - <<< "${plistData}");case "${dataType}" in "array"|"dict")sed -e 's/date>/string>/g; s/data>/string>/g; s/real>/string>/g; s/integer>/string>/g;' -e "s,<true/>,<string>true</string>,g; s,<false/>,<string>false</string>,g" -e 's/^[[:space:]]*//g; s/[[:space:]]*$//g' /dev/stdin 2>/dev/null <<< "${plistData}" | tr -d $'\n' | plutil -convert json -r - -o - 2>/dev/null; echo;;*)sed -e "s,<true/>,<string>true</string>,g; s,<false/>,<string>false</string>,g" <<< "${plistData}" | xmllint --xpath '/plist/*/text()' - 2>/dev/null | /usr/bin/perl -MHTML::Entities -pe 'decode_entities($_)' | jse ;;esac; };function crawlPlist(){ [ -t '0' ] && return 1;local plistData; read -r -d '' plistData <<< "$(cat)";[ -n "${BASH_VERSION}" ] && local OPTIND OPTARG;while getopts ":t" option; do case "${option}" in 't')traverseDataPlist="1";;esac;done;[ $OPTIND -ge 2 ] && shift $((OPTIND-1));local infoLevel="${1:-1}";local myPath="${2}";(awk '/^$/ {exit 0} /:$/ {exit 1} /\\\|$/ {exit 1} /\|$/ {exit 0} {exit 1}' &>/dev/null <<< "${myPath}") && myPath="${myPath}:";local plistLevel="${3:-0}";local indentOffset="$((4 * plistLevel))";local myType=$(getPlistPropertyType <<< "${plistData}");if [ "${myType}" = "data" ] && (((infoLevel == 3)) || ((traverseDataPlist))); then read -r -d '' data_b64 <<< "$(/usr/bin/xmllint --xpath "/plist/data/text()" - 2>/dev/null <<< "${plistData}")";local dataFileType=$(base64 -D <<< "${data_b64}" | file -b -);case "${dataFileType}" in "XML 1.0 document text"*)read -r -d '' data <<< "$(base64 -D <<< "${data_b64}")";if plutil -lint - 2>/dev/null 1>&2 <<< "${data}"; then dataIsPlist=1;else read -r -d '' data <<< $(/usr/bin/xmllint --format - 2>/dev/null <<< "${data}");dataIsPlist=0;fi;;"Apple binary property list")read -r -d '' data <<< "$(base64 -D <<< "${data_b64}" | /usr/bin/plutil -convert xml1 - -o -)";dataIsPlist=1;;"ASCII text"*|"Unicode text"*)data=$(base64 -D <<< "${data_b64}");dataIsPlist=0;;*)dataIsPlist=0;;esac;fi;case "${infoLevel}" in 1)cat <<< "${myPath}" | indent "${indentOffset}";;2)case "${myType}" in true|false)myType="bool";;esac;cat <<< "${myPath} >>> ${myType}" | indent "${indentOffset}";;3)case "${myType}" in "array"|"dict")cat <<< "${myPath} >>> ${myType}" | indent "${indentOffset}";;"integer"|"date"|"real"|"true"|"false")case "${myType}" in true|false)myType="bool";;esac;cat <<< "${myPath} >>> ${myType} >>> $(outputPlistAsText <<< "${plistData}")" | indent "${indentOffset}";;"string")local data=$(outputPlistAsText <<< "${plistData}");if (($(wc -l <<< "${data}") > 1)); then cat <<< "${myPath} >>> ${myType} >>>" | indent "${indentOffset}";indent "$((4+indentOffset))" <<< "${data}";else cat <<< "${myPath} >>> ${myType} >>> ${data}" | indent "${indentOffset}";fi;;"data")if ((dataIsPlist)); then cat <<< "${myPath} >>> ${myType} (${dataFileType}) >>> " | indent "${indentOffset}";! ((traverseDataPlist)) && indent "$((indentOffset+4))" <<< "${data}";else case "${dataFileType}" in "ASCII text"*|"Unicode text"*|"XML 1.0 document text"*)if (($(($(wc -l <<< "${data}"))) <= 1)); then cat <<< "${myPath} >>> ${myType} (${dataFileType}) >>> ${data}" | indent "${indentOffset}";else cat <<< "${myPath} >>> ${myType} (${dataFileType}) >>> " | indent "${indentOffset}";indent "$((indentOffset+4))" <<< "${data}";fi;;"JSON data")cat <<< "${myPath} >>> ${myType} (${dataFileType}) >>>" | indent "${indentOffset}";base64 -D <<< "${data_b64}" | /usr/bin/plutil -convert json -r - -o - | indent "$((indentOffset+4))"; echo;;*)cat <<< "${myPath} >>> ${myType} (${dataFileType}) >>> " | indent "${indentOffset}";base64 -D <<< "${data_b64}" | xxd -c 32 | indent $((4+indentOffset));;esac;fi;;esac;;esac;case "${myType}" in "dict"|"array")list=$(listKeysOrLength <<< "${plistData}");[ "${myType}" = "array" ] && list=$(seq 0 ${list} | sed '$d');IFS=$'\n';! (grep -q ":"$ <<< "${myPath}") && local colon=":" || local colon="";for item in ${list}; do read -r -d '' itemData <<< "$(plistQuery "${item}" <<< "${plistData}")";if ((traverseDataPlist)); then crawlPlist -t "${infoLevel}" "${myPath}${colon}${item//|/\\|}" "${plistLevel}" <<< "${itemData}";else crawlPlist "${infoLevel}" "${myPath}${colon}${item/|/\\|}" "${plistLevel}" <<< "${itemData}";fi;done;;"data")if ((dataIsPlist)) && ((traverseDataPlist)); then crawlPlist -t "${infoLevel}" "${myPath}|" "$((plistLevel+1))" <<< "${data}";fi;;esac;};function indent(){ [ -t 0 ] && return;cat | sed "s/^/$(printf "%*s" ${1:-0})${2}/"; };function outputPlistAsText(){ [ -t '0' ] && return 1;local plistData; read -r -d '' plistData <<< "$(cat)";local plistDataType=$(getPlistPropertyType <<< "${plistData}");case "${plistDataType}" in "date"|"integer"|"real")/usr/bin/xmllint --xpath "/plist/${plistDataType}/text()" - 2>/dev/null <<< "${plistData}";;true) echo "true";;false) echo "false";;"string")local printData=$(/usr/libexec/PlistBuddy -c "print" /dev/stdin 2>/dev/null <<< "${plistData}");if [ "${1}" = "r" ]; then cat <<< "${printData}";else local printDataType=$(file -b - <<< "${printData}");case "${printDataType}" in "XML 1.0 document text"*)if ! /usr/bin/xmllint --format - 2>/dev/null <<< "${printData}"; then cat <<< "${printData}";fi;;"JSON data")/usr/bin/plutil -convert json -r - -o - <<< "${printData}"; echo;;*)cat <<< "${printData}";esac;fi;;"array")if ! grep -q -E "<dict>|<data>" <<< "${plistData}"; then sed 's|<true/>|<string>true</string>|g; s|<false/>|<string>false</string>|g' <<< "${plistData}" | /usr/bin/xmllint --xpath '/plist/array//*[self::string or self::integer or self::real or self::date]/text()' - 2>/dev/null | /usr/bin/perl -MHTML::Entities -pe 'decode_entities($_)' 2>/dev/null;else /usr/bin/xmllint --format - 2>/dev/null <<< "${plistData}";fi;;"dict")if (($(listKeysOrLength <<< "${plistData}" | wc -l))); then /usr/bin/xmllint --format - 2>/dev/null <<< "${plistData}";fi;;esac;return 0; };function findDomainFilePath(){ local domainArg="${1}";local domainNameOnly="$(basename "${domainArg%.plist}")";case "${domainArg}" in "Apple Global Domain"|"NSGlobalDomain") domainNameOnly=".GlobalPreferences";;esac;local homeFolder=$(/usr/libexec/PlistBuddy -c "print dsAttrTypeStandard\:NFSHomeDirectory:0" /dev/stdin 2>/dev/null <<< "$(dscl -plist . -read "/Users/$(whoami)" NFSHomeDirectory)");find "${homeFolder}/Library/Preferences" "${homeFolder}/Library/Containers/${domainNameOnly}" "${homeFolder}/Library/Containers" -type f -path '*/Library/Preferences/*' -name "${domainNameOnly}.plist" -print -quit 2>/dev/null; };function getUserDomains(){ local homeFolder=$(/usr/libexec/PlistBuddy -c "print dsAttrTypeStandard\:NFSHomeDirectory:0" /dev/stdin 2>/dev/null <<< "$(dscl -plist . -read "/Users/$(whoami)" NFSHomeDirectory)");if [ "${1}" = "-H" ]; then local myUUID=$(/usr/libexec/PlistBuddy -c "print :0:IOPlatformUUID" /dev/stdin <<< "$(ioreg -ard1 -c IOPlatformExpertDevice)");defaultsDomains=$(find "${homeFolder}/Library/Preferences/ByHost" -name '*plist' 2>/dev/null | grep "${myUUID}" | sed -e "s:${homeFolder}/Library/Preferences/ByHost/::g" -e 's/\.plist$//g' | sort -d);else [ -f "${homeFolder}/Library/Preferences/.GlobalPreferences.plist" ] && defaultsDomains=".GlobalPreferences"$'\n';defaultsDomains+=$(defaults domains | sed $'s/, /\\n/g');fi;[ -n "${defaultsDomains}" ] && echo "${defaultsDomains}"; };function ISO2EPOCH(){ [ -t 0 ] && return 1; date -j -u -f '%Y-%m-%dT%H:%M:%SZ' "$(cat)" +%s; };[ "$(sw_vers -productVersion | cut -d. -f1)" -lt 13 ] && { echo "error: macOS 13 or higher required" >&2; return 1; };[ -n "${BASH_VERSION}" ] && local OPTIND OPTARG;while getopts ":bcCdDeFhjlfprstvxVz" option; do case "${option}" in 'b'|'d'|'D'|'e'|'F'|'j'|'l'|'f'|'p'|'r'|'s'|'t'|'x')[ -z "${myOp}" ] && myOp="${option}";;'c')[ -z "${myOp}" ] && myOp="${option}";[ "${myOp}" = "c" ] && let infoLevel++;;'v')[ -z "${myOp}" ] && { myOp="c"; infoLevel="3"; };;'C')[ -z "${myOp}" ] && { myOp="${option}"; traverseDataPlist="1"; };[ "${myOp}" = "C" ] && let infoLevel++;;'V')[ -z "${myOp}" ] && { myOp="C"; infoLevel=3; traverseDataPlist="1"; };;'h')[ -t '0' ] && echo "${helpText}" | less; exit;;'z')set -x;;esac;done;case "${myOp}" in 'd')getUserDomains return 0;;'D')getUserDomains -H;return 0;;esac;[ $OPTIND -ge 2 ] && shift $((OPTIND-1));if ! [ -t '0' ]; then input_b64=$(cat|base64);input_filetype=$(base64 -D <<< "${input_b64}" | file -b -);case "${input_filetype}" in "Apple binary property list"|"XML 1.0 document text"*)[ "${myOp}" = "p" ] && { echo "/dev/stdin"; return 0; };read -r -d '' plistData <<< "$(base64 -D <<< "${input_b64}" | plutil -convert xml1 -o - - 2>/dev/null)";;*)echo "error: input is not property list data." >&2;return 1;;esac;else fileArg="${1}";if [ -z "${fileArg}" ]; then echo "error: specify domain name or provide plist data via file argument, redirection or pipe; -h for help." >&2;return 1;elif [ -f "${fileArg}" ]; then if ! [ -r "${fileArg}" ]; then echo "error: file cannot be read, check permissions." >&2;return 1;fi;input_filetype=$(file -b "${fileArg}" 2>/dev/null);case "${input_filetype}" in "Apple binary property list"|"XML 1.0 document text"*)[ "${myOp}" = "f" ] && { echo "${fileArg}"; return 0; };read -r -d '' plistData <<< "$(plutil -convert xml1 "${fileArg}" -o - 2>/dev/null)";;*)echo "error: file is not a valid property list." >&2;return 1;;esac;else if defaults read "${fileArg}" 2>/dev/null 1>&2; then [ "${myOp}" = "f" ] && { findDomainFilePath "${fileArg}"; return 0; };read -r -d '' plistData <<< "$(defaults export "${fileArg}" -)";else domainPath=$(findDomainFilePath "${fileArg}");if ! [ -f "${domainPath}" ] || ! plistData=$(plutil -convert xml1 "${domainPath}" -o - 2>/dev/null); then echo "error: file/domain \"${fileArg}\" not found/valid" >&2;return 1;else [ "${myOp}" = "f" ] && { echo "${domainPath}"; return 0; };fi;fi;fi;shift 1;fi;if ! plutil -lint - 2>/dev/null 1>&2 <<< "${plistData}"; then echo "error: invalid property list data." >&2;return 1;fi;queryArg="${1:-:}";grep -q '|$' <<< "${queryArg}" && queryArg="${queryArg}:";queryArgEscaped=$(sed $'s/\\\\|/\x1e/g' <<< "${queryArg}");IFS=$'|';for queryArgElement in ${queryArgEscaped}; do queryArgElement=$(sed $'s/\x1e/|/g' <<< "${queryArgElement}");if ((queryLooped)); then read -r -d '' data_b64 <<< "$(/usr/bin/xmllint --xpath "/plist/data/text()" - 2>/dev/null <<< "${queryData}")";dataFileType=$(base64 -D <<< "${data_b64}" | file -b -);case "${dataFileType}" in 'Apple binary property list'|'XML 1.0 document text'*)if ! plistData="$(base64 -D <<< "${data_b64}" | /usr/bin/plutil -convert xml1 - -o - 2>/dev/null)"; then echo "error: pipe used on non-plist data node" >&2;return 1;fi;;*)echo "error: pipe used on non-plist data node" >&2;return 1;;esac;fi;if ! queryData=$(plistQuery "${queryArgElement}" <<< "${plistData}"); then if [ -n "${queryArgElement}" ]; then echo "error: key/path not found: ${queryArgElement}" >&2;fi;return 1;else read -r -d '' plistData <<< "${queryData}";fi;let queryLooped++;done;queryDataType=$(getPlistPropertyType <<< "${queryData}");case "${myOp}" in 'b')plutil -convert binary1 - -o - <<< "${queryData}";return 0;;'c'|'C')((traverseDataPlist)) && crawlPlist -t "${infoLevel}" <<< "${queryData}" || crawlPlist "${infoLevel}" <<< "${queryData}";return 0;;'e')case "${queryDataType}" in "date") outputPlistAsText <<< "${queryData}" | ISO2EPOCH;;*) echo "error: option -${myOp} for date type key only"; return 1;;esac;return 0;;'l')listKeysOrLength <<< "${queryData}" && return 0 || return 1;;'t')case "${queryDataType}" in true|false) echo "bool";; *) echo "${queryDataType}";; esac;return 0;;'p')/usr/libexec/PlistBuddy -c "print" /dev/stdin <<< "${queryData}";return 0;;'x')/usr/bin/xmllint --format - 2>/dev/null <<< "${queryData}";return 0;;esac;if [ "${queryDataType}" = "data" ]; then data_b64=$(/usr/bin/xmllint --xpath "/plist/data/text()" - 2>/dev/null <<< "${queryData}");dataFileType=$(base64 -D <<< "${data_b64}" | file -b -);case "${myOp}" in 'F')cat <<< "${dataFileType}";return 0;;'s')tr -d $' \r\n\t' <<< "${data_b64}"; echo;return 0;;'j')jse <<< $(tr -d $' \r\n\t' <<< "${data_b64}");return 0;;'r')base64 -D <<< "${data_b64}";return 0;;*)case "${dataFileType}" in "Apple binary property list"|"XML 1.0 document text"*)if ! output=$(base64 -D <<< "${data_b64}" | /usr/bin/plutil -convert xml1 - -o - 2>/dev/null | xmllint --format - 2>/dev/null); then base64 -D <<< "${data_b64}" | xmllint --format - 2>/dev/null;return 0;else outputPlistAsText "${myOp}" <<< "${output}";return 0;fi;;"JSON data")base64 -D <<< "${data_b64}" | /usr/bin/plutil -convert json -r - -o -; echo;return 0;;"ASCII text, with no line terminators")base64 -D <<< "${data_b64}"; echo;return 0;;*)base64 -D <<< "${data_b64}";return 0;;esac;;esac;else case "${myOp}" in 'F'|'s')echo "error: option -${myOp} for data type key only" >&2;return 1;;'j')plist2json <<< "${queryData}";return 0;;*)outputPlistAsText "${myOp}" <<< "${queryData}";return 0;;esac;fi)

plb "$@"
